import crypto from "crypto";

export interface VNPayConfig {
  tmnCode: string;
  hashSecret: string;
  url: string;
  returnUrl: string;
  ipnUrl: string;
}

export interface CreatePaymentUrlParams {
  amount: number;
  orderDescription: string;
  orderId: string;
  ipAddr: string;
  bankCode?: string;
  locale?: "vn" | "en";
}

export interface VNPayReturnParams {
  vnp_Amount: string;
  vnp_BankCode: string;
  vnp_BankTranNo: string;
  vnp_CardType: string;
  vnp_OrderInfo: string;
  vnp_PayDate: string;
  vnp_ResponseCode: string;
  vnp_TmnCode: string;
  vnp_TransactionNo: string;
  vnp_TransactionStatus: string;
  vnp_TxnRef: string;
  vnp_SecureHash: string;
  [key: string]: string;
}

export class VNPayService {
  private config: VNPayConfig;

  constructor(config: VNPayConfig) {
    this.config = config;
  }

  /**
   * üè¥‚Äç‚ò†Ô∏è Create VNPay payment URL - GenG style!
   */
  createPaymentUrl(params: CreatePaymentUrlParams): string {
    const {
      amount,
      orderDescription,
      orderId,
      ipAddr,
      bankCode = "VNPAYQR",
      locale = "vn",
    } = params;

    // üéØ Create payment parameters - GenG approved!
    const vnpParams: Record<string, string> = {
      vnp_Version: "2.1.0",
      vnp_Command: "pay",
      vnp_TmnCode: this.config.tmnCode,
      vnp_Amount: (amount * 100).toString(), // Convert to VNPay format (multiply by 100)
      vnp_CurrCode: "VND",
      vnp_TxnRef: orderId,
      vnp_OrderInfo: orderDescription,
      vnp_OrderType: "other",
      vnp_Locale: locale,
      vnp_ReturnUrl: this.config.returnUrl,
      vnp_IpAddr: ipAddr,
      vnp_CreateDate: this.getCurrentDateTime(),
    };

    // Add bank code if specified
    if (bankCode) {
      vnpParams.vnp_BankCode = bankCode;
    }

    // üîí Create secure hash - GenG style!
    const secureHash = this.createSecureHash(vnpParams);
    vnpParams.vnp_SecureHash = secureHash;

    // üöÄ Build URL with parameters
    const urlParams = new URLSearchParams(vnpParams);
    return `${this.config.url}?${urlParams.toString()}`;
  }

  /**
   * üîç Verify return URL from VNPay - GenG style!
   */
  verifyReturnUrl(params: VNPayReturnParams): {
    isValid: boolean;
    isSuccess: boolean;
    message: string;
    data?: VNPayReturnParams;
  } {
    try {
      const { vnp_SecureHash, ...otherParams } = params;

      // üîí Verify secure hash
      const calculatedHash = this.createSecureHash(otherParams);
      const isValidHash = calculatedHash === vnp_SecureHash;

      if (!isValidHash) {
        return {
          isValid: false,
          isSuccess: false,
          message: "Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá - Invalid signature",
        };
      }

      // ‚úÖ Check payment status
      const isSuccess = params.vnp_ResponseCode === "00";
      const message = this.getResponseMessage(params.vnp_ResponseCode);

      return {
        isValid: true,
        isSuccess,
        message,
        data: params,
      };
    } catch (error) {
      return {
        isValid: false,
        isSuccess: false,
        message: "L·ªói x√°c th·ª±c d·ªØ li·ªáu - Data verification error",
      };
    }
  }

  /**
   * üîê Create secure hash for VNPay - GenG style!
   */
  private createSecureHash(params: Record<string, string>): string {
    // Remove vnp_SecureHash if exists
    const { vnp_SecureHash, ...cleanParams } = params;

    // Sort parameters alphabetically
    const sortedKeys = Object.keys(cleanParams).sort();

    // Create query string
    const queryString = sortedKeys
      .map((key) => `${key}=${cleanParams[key]}`)
      .join("&");

    // Create HMAC SHA512 hash
    const hmac = crypto.createHmac("sha512", this.config.hashSecret);
    hmac.update(queryString, "utf8");
    return hmac.digest("hex");
  }

  /**
   * üìÖ Get current date time in VNPay format - GenG style!
   */
  private getCurrentDateTime(): string {
    const now = new Date();
    const year = now.getFullYear();
    const month = (now.getMonth() + 1).toString().padStart(2, "0");
    const day = now.getDate().toString().padStart(2, "0");
    const hour = now.getHours().toString().padStart(2, "0");
    const minute = now.getMinutes().toString().padStart(2, "0");
    const second = now.getSeconds().toString().padStart(2, "0");

    return `${year}${month}${day}${hour}${minute}${second}`;
  }

  /**
   * üí¨ Get response message from VNPay response code - GenG style!
   */
  private getResponseMessage(responseCode: string): string {
    const messages: Record<string, string> = {
      "00": "Giao d·ªãch th√†nh c√¥ng",
      "07": "Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù (li√™n quan t·ªõi l·ª´a ƒë·∫£o, giao d·ªãch b·∫•t th∆∞·ªùng).",
      "09": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng.",
      "10": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn",
      "11": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch.",
      "12": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a.",
      "13": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP). Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch.",
      "24": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng h·ªßy giao d·ªãch",
      "51": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.",
      "65": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y.",
      "75": "Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨.",
      "79": "Giao d·ªãch kh√¥ng th√†nh c√¥ng do: KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch",
      "99": "C√°c l·ªói kh√°c (l·ªói c√≤n l·∫°i, kh√¥ng c√≥ trong danh s√°ch m√£ l·ªói ƒë√£ li·ªát k√™)",
    };

    return messages[responseCode] || `M√£ l·ªói kh√¥ng x√°c ƒë·ªãnh: ${responseCode}`;
  }

  /**
   * üéØ Get bank codes for VNPay - GenG style!
   */
  static getBankCodes(): Record<string, string> {
    return {
      VNPAYQR: "Thanh to√°n qu√©t m√£ QR",
      VNBANK: "Th·∫ª ATM - T√†i kho·∫£n ng√¢n h√†ng n·ªôi ƒë·ªãa",
      INTCARD: "Th·∫ª thanh to√°n qu·ªëc t·∫ø",
      VISA: "Th·∫ª VISA",
      MASTERCARD: "Th·∫ª MASTERCARD",
      JCB: "Th·∫ª JCB",
      VCB: "Ng√¢n h√†ng TMCP Ngo·∫°i Th∆∞∆°ng Vi·ªát Nam",
      TCB: "Ng√¢n h√†ng TMCP K·ªπ Th∆∞∆°ng Vi·ªát Nam",
      MB: "Ng√¢n h√†ng TMCP Qu√¢n ƒê·ªôi",
      VIB: "Ng√¢n h√†ng TMCP Qu·ªëc T·∫ø Vi·ªát Nam",
      ICB: "Ng√¢n h√†ng TMCP C√¥ng Th∆∞∆°ng Vi·ªát Nam",
      EXB: "Ng√¢n h√†ng TMCP Xu·∫•t Nh·∫≠p Kh·∫©u Vi·ªát Nam",
      ACB: "Ng√¢n h√†ng TMCP √Å Ch√¢u",
      HDB: "Ng√¢n h√†ng TMCP Ph√°t Tri·ªÉn Th√†nh ph·ªë H·ªì Ch√≠ Minh",
      MSB: "Ng√¢n h√†ng TMCP H√†ng H·∫£i",
      NVB: "Ng√¢n h√†ng TMCP Nam Vi·ªát",
      VAB: "Ng√¢n h√†ng TMCP Vi·ªát √Å",
      VPB: "Ng√¢n h√†ng TMCP Vi·ªát Nam Th·ªãnh V∆∞·ª£ng",
      SCB: "Ng√¢n h√†ng TMCP S√†i G√≤n",
      BIDV: "Ng√¢n h√†ng TMCP ƒê·∫ßu t∆∞ v√† Ph√°t tri·ªÉn Vi·ªát Nam",
    };
  }
}
